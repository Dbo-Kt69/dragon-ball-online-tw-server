/*****************************************************************************
 * filesystems.hsl - Structure definitions for file system related entities.
 *     This presently includes the MBR, and BOOTSECTORs for FAT16, FAT32, and
 *     NTFS.
 *  
 * Copyright (c) 2003-2008 BreakPoint Software, Inc.  All Rights Reserved
 *
 *****************************************************************************
 * Revision History:
 *  05/01/03 - RJA - Original
 *  10/16/07 - RJA - Formatting tweaks, use blob for ByteCode
 *  12/16/09 - RJA - Added enumsign pragmas
 */

#include "standard-types.hsl"
struct CNtlVector
{
	float x;
	float y;
	float z;
}CNtlVector;

struct worldtable2
{
  BYTE gap0[4];
  float float4;
  BYTE gap8[104];
  DWORD dword70;
  float float74;
  BYTE gap78[544];
  float float298;
  float float29C;
  float float2A0;
  float float2B0;
  float float2B4;
  float float2B8;
  BYTE gap2BC[12];
  float float2C8;
  float float2CC;
  float float2D0;
  float float2E0;
  float float2E4;
  float float2E8;
  BYTE gap2EC[12];
  float float2F8;
  float float2FC;
  float float300;
  BYTE gap304[32];
  float float324;
  float float328;
  float float32C;
};

struct worldtable
{

  DWORD tblidx;
char			szName[32 + 1];
BYTE fill[1];
	WCHAR			wszName[32 + 1];
  //BYTE gap8[100];
	bool			bDynamic;
BYTE fill[3];
  DWORD nCreateCount;
  DWORD unknown;
  BYTE byDoorType;
BYTE fill[3];
  DWORD dwDestroyTimeInMilliSec;
  //BYTE gap80[392];
	//	std::wstring	wstrMobSpawn_Table_Name;
	WCHAR			wszMobSpawn_Table_Name[64 + 1];
	//	std::wstring	wstrNpcSpawn_Table_Name;
	WCHAR			wszNpcSpawn_Table_Name[64 + 1];
	//	std::wstring	wstrObjSpawn_Table_Name;
	WCHAR			wszObjSpawn_Table_Name[64 + 1];
BYTE fill[2];
	CNtlVector		vStart;
	CNtlVector		vEnd;
  //__declspec(align(8)) float float228;
	CNtlVector		vStandardLoc;
	CNtlVector		vBattleStartLoc;
	CNtlVector		vBattleEndLoc;
	CNtlVector		vOutSideBattleStartLoc;
	CNtlVector		vOutSideBattleEndLoc;
	CNtlVector		vSpectatorStartLoc;
	CNtlVector		vSpectatorEndLoc;
 // __declspec(align(8)) float float288;
	CNtlVector		UnknownLoc;
	CNtlVector		UnknownDir;
	CNtlVector		vDefaultLoc;
	CNtlVector		vDefaultDir;
	CNtlVector		vStart1Loc;
	CNtlVector		vStart1Dir;
	CNtlVector		vStart2Loc;
 //__declspec(align(8)) float float2E8;
	CNtlVector		vStart2Dir;
	CNtlVector		UnknownVec[4];
  float fSplitSize;
	bool			bNight_Able;
  BYTE byStatic_Time;
  WORD wFuncFlag;
  BYTE byWorldRuleType;
BYTE fill[3];
  DWORD worldRuleTbldx;
  DWORD outWorldTblidx;
	CNtlVector		outWorldLoc;
	CNtlVector		outWorldDir;
	wchar			wszResourceFolder[64 + 1];
BYTE fill[2];
  float fBGMRestTime;
  DWORD dwWorldResourceID;
  float fFreeCamera_Height;
	WCHAR			wszEnterResourceFlash[32 + 1];
	WCHAR			wszLeaveResourceFlash[32 + 1];
  DWORD wpsLinkIndex;
  BYTE unknown;
  BYTE unknown[10];
BYTE fill[1];
  DWORD unknown;
};

struct sWORLD_TBLDAT
{
DWORD tblidx;
char			szName[32 + 1];
BYTE fill[1];
	WCHAR			wszName[32 + 1];
	bool			bDynamic;
BYTE fill[3];
	DWORD			nCreateCount;
DWORD unknown;
	BYTE			byDoorType;
BYTE fill[3];
	DWORD			dwDestroyTimeInMilliSec;

	//	std::wstring	wstrMobSpawn_Table_Name;
	WCHAR			wszMobSpawn_Table_Name[64 + 1];
	//	std::wstring	wstrNpcSpawn_Table_Name;
	WCHAR			wszNpcSpawn_Table_Name[64 + 1];
	//	std::wstring	wstrObjSpawn_Table_Name;
	WCHAR			wszObjSpawn_Table_Name[64 + 1];
BYTE fill[2];
	CNtlVector		vStart;
	CNtlVector		vEnd;

	CNtlVector		vStandardLoc;

	CNtlVector		vBattleStartLoc;
	CNtlVector		vBattleEndLoc;

	CNtlVector		vOutSideBattleStartLoc;
	CNtlVector		vOutSideBattleEndLoc;

	CNtlVector		vSpectatorStartLoc;
	CNtlVector		vSpectatorEndLoc;

	CNtlVector		UnknownLoc;
	CNtlVector		UnknownDir;

	CNtlVector		vDefaultLoc;
	CNtlVector		vDefaultDir;

	CNtlVector		vStart1Loc;
	CNtlVector		vStart1Dir;

	CNtlVector		vStart2Loc;
	CNtlVector		vStart2Dir;

	CNtlVector		UnknownVec[4];


	float			fSplitSize;
	bool			bNight_Able;
	BYTE			byStatic_Time;

	WORD			wFuncFlag;

	BYTE			byWorldRuleType;	// eGAMERULE_TYPE
BYTE fill[3];
	DWORD			worldRuleTbldx;		// ЗШґзЗПґВ ·к ЕЧАМєн АОµ¦Ѕє ( ·кё¶ґЩ ЕЧАМєн ЖІёІ : ·©Е©№иЖІ/ЕёАУДщЅєЖ®/ µоµо... )

	DWORD			outWorldTblidx;
	CNtlVector		outWorldLoc;
	CNtlVector		outWorldDir;
	wchar			wszResourceFolder[64 + 1];
BYTE fill[2];
	float			fBGMRestTime;
	DWORD		dwWorldResourceID;
	float			fFreeCamera_Height;

	WCHAR			wszEnterResourceFlash[32 + 1];
	WCHAR			wszLeaveResourceFlash[32 + 1];

	DWORD			wpsLinkIndex;

	BYTE unknown3[11];
BYTE fill[1];
	DWORD unknown4;
};