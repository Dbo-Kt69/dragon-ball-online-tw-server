/*****************************************************************************
 * filesystems.hsl - Structure definitions for file system related entities.
 *     This presently includes the MBR, and BOOTSECTORs for FAT16, FAT32, and
 *     NTFS.
 *  
 * Copyright (c) 2003-2008 BreakPoint Software, Inc.  All Rights Reserved
 *
 *****************************************************************************
 * Revision History:
 *  05/01/03 - RJA - Original
 *  10/16/07 - RJA - Formatting tweaks, use blob for ByteCode
 *  12/16/09 - RJA - Added enumsign pragmas
 */

struct sITEM_TBLDAT3
{
DWORD tblidx;
BYTE			bValidity_Able;
BYTE fill[3];
	DWORD			Name;
	wchar_t			wszNameText[33]; // -32 because in table we only store 32 + 1
	char			szIcon_Name[ 32 + 1 ];
	BYTE			byModel_Type;
	char			szModel[ 32 + 1 ];
	char			szSub_Weapon_Act_Model[ 32 + 1 ];
	BYTE			byItem_Type;
	BYTE			byEquip_Type;
	DWORD			dwEquip_Slot_Type_Bit_Flag;
	WORD			wFunction_Bit_Flag;	//eITEM_FUNC_BIT_FLAG
	BYTE			byMax_Stack;
	BYTE			byRank;
	DWORD			dwWeight; //new
	DWORD			dwCost;
	DWORD			dwSell_Price; //new
	BYTE			byDurability;
	BYTE			byDurability_Count;
	BYTE			byBattle_Attribute;
BYTE fill[1];

	WORD			wPhysical_Offence;
	WORD			wEnergy_Offence;
	WORD			wPhysical_Defence;
	WORD			wEnergy_Defence;

	float			fAttack_Range_Bonus;
	WORD			wAttack_Speed_Rate;

	BYTE			byNeed_Min_Level; //new
	BYTE			byNeed_Max_Level; //new

	DWORD			dwNeed_Class_Bit_Flag;

	DWORD			dwNeed_Gender_Bit_Flag; //new

	BYTE			byClass_Special;
	BYTE			byRace_Special;
	WORD			wNeed_Str;
	WORD			wNeed_Con;
	WORD			wNeed_Foc;
	WORD			wNeed_Dex;
	WORD			wNeed_Sol;
	WORD			wNeed_Eng;
BYTE fill[2];
	DWORD			set_Item_Tblidx;
	DWORD			Note;
	BYTE			byBag_Size;
BYTE fill[1];
	WORD			wScouter_Watt;	
	DWORD			dwScouter_MaxPower;
	BYTE			byScouter_Parts_Type1;
	BYTE			byScouter_Parts_Type2;
	BYTE			byScouter_Parts_Type3;
	BYTE			byScouter_Parts_Type4;


	DWORD			Use_Item_Tblidx;
	BYTE			bIsCanHaveOption; //new
BYTE fill[3];
	DWORD			Item_Option_Tblidx;

	BYTE			byItemGroup;
BYTE fill[3];
	DWORD			Charm_Tblidx;
	WORD			wCostumeHideBitFlag;
BYTE fill[2];
	DWORD			NeedItemTblidx;
	DWORD			CommonPoint;
	BYTE			byCommonPointType;
	BYTE			byNeedFunction;
BYTE fill[2];
	DWORD			dwUseDurationMax;
	BYTE			byDurationType;		//eDURATIONTYPE
BYTE fill[3];
	DWORD			contentsTblidx;
	DWORD			dwDurationGroup;
	BYTE			byDropLevel;
	BYTE fill[3];
	DWORD			enchantRateTblidx;
	DWORD			excellentTblidx;
	DWORD			rareTblidx;
	DWORD			legendaryTblidx;

	BYTE			bCreateSuperiorAble;
	BYTE			bCreateExcellentAble;
	BYTE			bCreateRareAble;
	BYTE			bCreateLegendaryAble;
	BYTE			byRestrictType;			//eITEM_RESTRICT_TYPE
BYTE fill[3];
	float			fAttack_Physical_Revision;
	float			fAttack_Energy_Revision;
	float			fDefence_Physical_Revision;
	float			fDefence_Energy_Revision;

	BYTE			byTmpTabType;
	BYTE			bIsCanRenewal;
	WORD			wDisassemble_Bit_Flag;

	BYTE			byDisassembleNormalMin;
	BYTE			byDisassembleNormalMax;
	BYTE			byDisassembleUpperMin;
	BYTE			byDisassembleUpperMax;
	BYTE			byDropVisual;

	BYTE			byUseDisassemble;
	
};


struct sITEM_TBLDAT
{
	unsigned int          tblidx;
BYTE			bValidity_Able;
BYTE fill[3];
	unsigned int          tbxName;
	wchar_t           awcNameText[32 + 1];
	CHAR            acIconName[32 + 1];

	BYTE            byModelType;

	CHAR            acModel[32 + 1];
	CHAR            acSubWeaponActModel[32 + 1];

	BYTE	        eItemType; // BYTE
	BYTE			eEquipType; // BYTE

	DWORD           dwEquipSlotTypeBitFlag;
	WORD            wFunctionBitFlag;

	BYTE            byMaxStack;
	BYTE		    eRank; // BYTE

	DWORD           dwWeight;

	DWORD           dwCost;
	unsigned int          tbxSellPrice;

	BYTE            byDurability;
	BYTE            byDurabilityCount;
	BYTE			eBattleAttribute; // BYTE
BYTE fill;
	WORD            wPhysicalOffence;
	WORD            wEnergyOffence;
	WORD            wPhysicalDefence;
	WORD            wEnergyDefence;

	FLOAT           fAttackRangeBonus;
	WORD            wAttackSpeedRate;

	BYTE            byNeedLevel;
	BYTE            byNeedMaxLevel;
	DWORD           dwNeedClassBitFlag;
	DWORD           dwNeedGenderBitFlag;

	BYTE            byClassSpecial;
	BYTE            byRaceSpecial;

	WORD            wNeedStr;
	WORD            wNeedCon;
	WORD            wNeedFoc;
	WORD            wNeedDex;
	WORD            wNeedSol;
	WORD            wNeedEng;

BYTE fill[2];
	unsigned int          tbxSetItem;

	unsigned int          tbxNote;

	BYTE            byBagSize;
BYTE fill[1];
	WORD            wScouterWatt;
	DWORD           dwScouterMaxPower;
	WORD            wScouterPartsType;
	WORD            wScouterPartsValue;
	unsigned int          tbxUseItem;
	BYTE	        bCanHaveOption;
BYTE fill[3];

	unsigned int          tbxItemOption;
	BYTE            byItemGroup;//ticket upgrade here^^
BYTE fill[3];
	unsigned int          tbxCharm;
	WORD            wCostumeHideBitFlag;
BYTE fill[2];
	unsigned int          tbxNeedItem;
	DWORD           dwCommonPoint;
	BYTE            byCommonPointType;

	BYTE            byNeedFunction;
BYTE fill[2];

	DWORD           dwUseDurationMax;
	BYTE		    eDurationType; // BYTE
BYTE fill[3];
	unsigned int          tbxContents;
	DWORD           dwDurationGroup;
	BYTE            byDropLevel;
BYTE fill[3];
	DWORD           dwCreateEnchentRateID;
	DWORD           dwExcellentID;
	DWORD           dwRareID;
	DWORD           dwLegendaryID;
	BYTE			bCreateSuperiorAble;
	BYTE			bCreateExcelentAble;
	BYTE			bCreateRareAble;
	BYTE			bCreateLegendaryAble;

	BYTE			eRestrictType; // BYTE
BYTE fill[3];
	FLOAT           fAttackPhysical;
	FLOAT           fAttackEnergy;
	FLOAT           fDefencePhysical;
	FLOAT           fDefenceEnergy;

	BYTE            byTmpCategoryType;
	BYTE	        bCanRenewal;
	WORD            wDisassembleBitFlag;

	BYTE            byNormalMin;
	BYTE            byNormalMax;
	BYTE            byRankUpMin;
	BYTE            byRankUpMax;

	BYTE           bUseDisassemble;
	BYTE           bDropVisual;
BYTE fill[2];
};


struct sITEM_TBLDAT2
{
  //DWORD gap0; // quitar posiblemente
  DWORD dword4;
  BYTE byte8;
  BYTE gap9[3];
  DWORD dwordC;
  BYTE gap10[99];
  BYTE byte73;
  BYTE gap74[66];
  BYTE byteB6;
  BYTE byteB7;
  DWORD dwordB8;
  WORD wordBC;
  BYTE byteBE;
  BYTE byteBF;
  DWORD dwordC0;
  DWORD dwordC4;
  DWORD dwordC8;
  BYTE byteCC;
  BYTE byteCD;
  BYTE byteCE;
BYTE fill;
  WORD wordD0;
  WORD wordD2;
  WORD wordD4;
  WORD wordD6;
  float floatD8;
  WORD wordDC;
  BYTE byteDE;
  BYTE byteDF;
  DWORD dwordE0;
  DWORD dwordE4;
  BYTE byteE8;
  BYTE byteE9;
  WORD wordEA;
  WORD wordEC;
  WORD wordEE;
  WORD wordF0;
  WORD wordF2;
  WORD wordF4;
  BYTE gapF6[2];
  DWORD dwordF8;
  DWORD dwordFC;
  BYTE byte100;
BYTE fill;
  WORD word102;
  DWORD dword104;
  BYTE gap108[4];
  DWORD dword10C;
  BYTE byte110;
  BYTE gap111[3];
  DWORD dword114;
  BYTE byte118;
  BYTE gap119[3];
  DWORD dword11C;
  WORD word120;
  BYTE gap122[2];
  DWORD dword124;
  DWORD dword128;
  BYTE byte12C;
  BYTE byte12D;
  BYTE gap12E[2];
  DWORD dword130;
  BYTE byte134;
  BYTE gap135[3];
  DWORD dword138;
  DWORD dword13C;
  BYTE byte140;
  BYTE gap141[3];
  DWORD dword144;
  DWORD dword148;
  DWORD dword14C;
  DWORD dword150;
  BYTE byte154;
  BYTE byte155;
  BYTE byte156;
  BYTE byte157;
  BYTE byte158;
  BYTE gap159[3];
  float float15C;
  float float160;
  float float164;
  float float168;
  BYTE byte16C;
  BYTE byte16D;
  BYTE gap16E[2];
  BYTE byte170;
  BYTE byte171;
  BYTE byte172;
  BYTE byte173;
  BYTE byte174;
  BYTE byte175;
};